#!/usr/bin/env bash

# Filter tags to match SemVer including pre-releases
filter() {
	local prefix=$1

	# These patterns have been taken from semver Backus-Naur form grammar
	# https://semver.org/#backusnaur-form-grammar-for-valid-semver-versions
	local numeric="(0|[1-9][0-9]*)"
	local nondigit="([[:alpha:]]|-)"
	local identifier="([[:digit:]]|$nondigit)"
	local alphanumeric="($identifier*$nondigit$identifier*)"
	local prerelease="($alphanumeric|$numeric)"

	local semverregex="$prefix($numeric\.){2}$numeric"
	local preregex="(-$prerelease(\.$prerelease)*)"
	local regex="^$semverregex$preregex?$"

	grep --extended-regexp "$regex"
}

# List all semver tags and sort them
gettags() {
	local prefix=$1

	git -c versionsort.suffix=- tag --list --sort='version:refname' "$prefix*.*.*" \
		| filter "$prefix"
}

# Get SHA of object ref points to
getparentsha() {
	local ref=$1
	git rev-parse --verify "$ref^{}"
}

# Create an annotated tag
createannotatedtag() {
	local tag=$1
	local semvertag=$2

	# Find SHA of object tag points to
	local sha
	sha=$(getparentsha "$semvertag")

	# Create tag object
	echo "Creating tag object for $tag..."
	local tagsha
	tagsha=$(gh api 'repos/{owner}/{repo}/git/tags' \
		--raw-field "tag=$tag" \
		--raw-field "message=latest release in $tag" \
		--raw-field "object=$sha" \
		--raw-field "type=commit" \
		--jq '.sha')

	# Create tag reference
	echo "Creating tag reference..."
	gh api 'repos/{owner}/{repo}/git/refs' \
		--raw-field "ref=refs/tags/$tag" \
		--raw-field "sha=$tagsha" \
		| jq .
}

# Populate associative array with additional tags
tagtable() {
	local -n table=$1
	local prefix=$2
	local updatelatest=$3
	local updateminor=$4

	local coretag pretag
	local major minor patch
	while IFS=- read -r coretag pretag; do
		IFS=. read -r major minor patch <<< "$coretag"
		if [[ -n $pretag ]]; then
			if [[ $updateminor == 'true' ]]; then
				table["$major.$minor-pre"]="$major.$minor.$patch-$pretag"
			fi

			continue
		fi

		table["$major"]="$major.$minor.$patch"

		if [[ $updatelatest == 'true' ]]; then
			table["latest"]="$major.$minor.$patch"
		fi

		if [[ $updateminor == 'true' ]]; then
			# shellcheck disable=SC2034
			table["$major.$minor"]="$major.$minor.$patch"
		fi
	done < <(gettags "$prefix")
}

main() {
	# Parse options
	local opt updatelatest updateminor prefix
	prefix='v'
	while getopts 'lmv' opt; do
		case $opt in
			l) updatelatest='true' ;;
			m) updateminor='true' ;;
			v) prefix='' ;;
			'?') exit 1 ;;
		esac
	done

	# Set git name and email
	git config --global user.name "github-actions"
	git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

	# Clobber local tags
	git fetch --tags --force

	# Build associative array of most recent major and minor releases
	local -A latest

	echo "Building tag table..."
	tagtable latest "$prefix" "$updatelatest" "$updateminor"

	# Move or create tags
	for tag in "${!latest[@]}"; do
		echo "Checking $tag..."
		semvertag=${latest["$tag"]}
		if git show-ref --tags --quiet "$tag"; then
			if [[ $(getparentsha "$tag") == "$(getparentsha "$semvertag")" ]]; then
				echo "$tag already points to same commit as $semvertag, skipping..."
				continue
			fi
			# Delete local and remote tag
			echo "Deleting $tag..."
			git tag --delete "$tag"
			git push --delete origin "$tag"
		fi
		echo "Creating annotated tag $tag pointing to same commit as $semvertag..."
		createannotatedtag "$tag" "$semvertag"
	done
}

if [[ ${BASH_SOURCE[0]} == "$0" ]]; then
	main "$@"
else
	true
fi
